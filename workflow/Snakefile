# [[file:../main.org::*IMPORTS][IMPORTS:1]]
import os
import sys
import random
# IMPORTS:1 ends here

# [[file:../main.org::*FILE CONFIGS][FILE CONFIGS:1]]
configfile: 'config/config.yaml'
# FILE CONFIGS:1 ends here

# [[file:../main.org::*FUNCTIONS][FUNCTIONS:1]]
get_cores_perc = lambda perc: max(1, workflow.cores * perc)
join_path = lambda *args: os.path.join(*args)
# FUNCTIONS:1 ends here

# [[file:../main.org::*GLOBAL VARIABLES][GLOBAL VARIABLES:1]]
snakefile_path = os.path.dirname(workflow.snakefile)
results_dir = join_path('results')
scripts_dir = join_path(snakefile_path, 'scripts')

# Globs
GENOME_IDS = list(map(lambda x: x.name.replace('_out', ''), filter(lambda x: x.is_dir(), Path(config['prokka_dir']).iterdir())))

# Run only for a sub sample of the input,
# config['sample_input'] must be a interger value >= 1.
if isinstance(config['sample_input'], int) and config['sample_input'] >= 1:
    GENOME_IDS = random.sample(GENOME_IDS, config['sample_input'])
# GLOBAL VARIABLES:1 ends here

# [[file:../main.org::*MAIN RULE ALL][MAIN RULE ALL:1]]
rule all:
    input:
        padloc_out_dir = expand(join_path(results_dir, 'padloc', '{genome_id}'), genome_id=GENOME_IDS),
        # neighborhood_csv = expand(join_path(results_dir, 'neighborhood', '{genome_id}.csv'), genome_id=GENOME_IDS)
# MAIN RULE ALL:1 ends here

# [[file:../main.org::*Include][Include:1]]
include:
    'rules/get_gene_neighborhood.smk'
# Include:1 ends here
